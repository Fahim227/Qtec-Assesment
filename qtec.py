# -*- coding: utf-8 -*-
"""Qtec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OYGBcrf2Q14r-WEET7mgof_AY9O2FkXh
"""

cities = ["Rabat",
      "Sueca", 
      "Rudow", 
      "Mosu", 
      "Le Plessis Trevise", 
      "Kang Dong", 
      "Nezahualc√≥yotl", 
      "Lindenwold", 
      "Queanbeyan", 
      "Saint Chamond", 
      "Cheektowaga",
      "Tirupati",
      "Snezhinsk",
      "Glazov",
      "Gaoyou",
      "Nola",
      "Rutigliano",
      "Colombo",
      "Meckenheim",
      "Hamburg",
]
distances = [1063,
2656,
1352,
1841,
61,
1634,
151,
285,
146,
11,
380,
2547,
2524,
97,
6999,
63,
105,
244,
502,
30,
]
sum = 0
for i in distances:
  sum+=i
print(sum-30)

import math
def shortest_path(graph,source):
  global distances
  global cities
  nodes = {}

  for city in cities:
    nodes[city] = {"weight":math.inf,"route_from":""}
  nodes[cities[0]]["weight"] = 0
  nodes[cities[0]]["route_from"] = cities[0]
  # print(nodes)
  visited = []
  path = []
  for city in graph:
    # print(city)
    if city not in visited:
      visited.append(city)
      for item in graph[city]:
        if item not in visited:
          w = graph[city][item] + nodes[city]["weight"]
          if w < nodes[item]["weight"]:
            nodes[item]["weight"] = w
            nodes[item]["route_from"] += nodes[city]["route_from"]+"->"+item
  print("Shortest Distances: ", nodes['Hamburg']["weight"])
  print("Shortest Path: ", nodes['Hamburg']["route_from"])

graph = []

d = {}
for i in range(0,len(cities)):
  if i == len(cities)-1 :
    graph.append([cities[i],cities[-1],distances[i]])
    d[cities[i]] = {cities[-1]: distances[i]}
  else:
    graph.append([cities[i],cities[i+1],distances[i]])
    d[cities[i]] = {cities[i+1]: distances[i]}
shortest_path(d,cities[0])

